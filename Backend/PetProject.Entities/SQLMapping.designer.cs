#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PetProject.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PetProjectDB")]
	public partial class SQLMappingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertClinic(Clinic instance);
    partial void UpdateClinic(Clinic instance);
    partial void DeleteClinic(Clinic instance);
    partial void InsertDetailAppointment(DetailAppointment instance);
    partial void UpdateDetailAppointment(DetailAppointment instance);
    partial void DeleteDetailAppointment(DetailAppointment instance);
    partial void InsertDisease(Disease instance);
    partial void UpdateDisease(Disease instance);
    partial void DeleteDisease(Disease instance);
    partial void InsertOwner(Owner instance);
    partial void UpdateOwner(Owner instance);
    partial void DeleteOwner(Owner instance);
    partial void InsertPet(Pet instance);
    partial void UpdatePet(Pet instance);
    partial void DeletePet(Pet instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVaccination(Vaccination instance);
    partial void UpdateVaccination(Vaccination instance);
    partial void DeleteVaccination(Vaccination instance);
    partial void InsertDetailVetClinic(DetailVetClinic instance);
    partial void UpdateDetailVetClinic(DetailVetClinic instance);
    partial void DeleteDetailVetClinic(DetailVetClinic instance);
    partial void InsertVet(Vet instance);
    partial void UpdateVet(Vet instance);
    partial void DeleteVet(Vet instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertClinicHistory(ClinicHistory instance);
    partial void UpdateClinicHistory(ClinicHistory instance);
    partial void DeleteClinicHistory(ClinicHistory instance);
    #endregion
		
		public SQLMappingDataContext() : 
				base(global::PetProject.Entities.Properties.Settings.Default.PetProjectDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLMappingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLMappingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLMappingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLMappingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<Clinic> Clinics
		{
			get
			{
				return this.GetTable<Clinic>();
			}
		}
		
		public System.Data.Linq.Table<DetailAppointment> DetailAppointments
		{
			get
			{
				return this.GetTable<DetailAppointment>();
			}
		}
		
		public System.Data.Linq.Table<Disease> Diseases
		{
			get
			{
				return this.GetTable<Disease>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<Pet> Pets
		{
			get
			{
				return this.GetTable<Pet>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Vaccination> Vaccinations
		{
			get
			{
				return this.GetTable<Vaccination>();
			}
		}
		
		public System.Data.Linq.Table<DetailVetClinic> DetailVetClinics
		{
			get
			{
				return this.GetTable<DetailVetClinic>();
			}
		}
		
		public System.Data.Linq.Table<Vet> Vets
		{
			get
			{
				return this.GetTable<Vet>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<ClinicHistory> ClinicHistories
		{
			get
			{
				return this.GetTable<ClinicHistory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAppointment;
		
		private System.Nullable<System.DateTime> _appointmentDate;
		
		private string _title;
		
		private System.Nullable<int> _idPet;
		
		private System.Nullable<bool> _confirmed;
		
		private EntitySet<DetailAppointment> _DetailAppointments;
		
		private EntityRef<Pet> _Pet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAppointmentChanging(int value);
    partial void OnidAppointmentChanged();
    partial void OnappointmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnappointmentDateChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnidPetChanging(System.Nullable<int> value);
    partial void OnidPetChanged();
    partial void OnconfirmedChanging(System.Nullable<bool> value);
    partial void OnconfirmedChanged();
    #endregion
		
		public Appointment()
		{
			this._DetailAppointments = new EntitySet<DetailAppointment>(new Action<DetailAppointment>(this.attach_DetailAppointments), new Action<DetailAppointment>(this.detach_DetailAppointments));
			this._Pet = default(EntityRef<Pet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAppointment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAppointment
		{
			get
			{
				return this._idAppointment;
			}
			set
			{
				if ((this._idAppointment != value))
				{
					this.OnidAppointmentChanging(value);
					this.SendPropertyChanging();
					this._idAppointment = value;
					this.SendPropertyChanged("idAppointment");
					this.OnidAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appointmentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> appointmentDate
		{
			get
			{
				return this._appointmentDate;
			}
			set
			{
				if ((this._appointmentDate != value))
				{
					this.OnappointmentDateChanging(value);
					this.SendPropertyChanging();
					this._appointmentDate = value;
					this.SendPropertyChanged("appointmentDate");
					this.OnappointmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(30)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPet", DbType="Int")]
		public System.Nullable<int> idPet
		{
			get
			{
				return this._idPet;
			}
			set
			{
				if ((this._idPet != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPetChanging(value);
					this.SendPropertyChanging();
					this._idPet = value;
					this.SendPropertyChanged("idPet");
					this.OnidPetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_confirmed", DbType="Bit")]
		public System.Nullable<bool> confirmed
		{
			get
			{
				return this._confirmed;
			}
			set
			{
				if ((this._confirmed != value))
				{
					this.OnconfirmedChanging(value);
					this.SendPropertyChanging();
					this._confirmed = value;
					this.SendPropertyChanged("confirmed");
					this.OnconfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_DetailAppointment", Storage="_DetailAppointments", ThisKey="idAppointment", OtherKey="idAppointment")]
		public EntitySet<DetailAppointment> DetailAppointments
		{
			get
			{
				return this._DetailAppointments;
			}
			set
			{
				this._DetailAppointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Appointment", Storage="_Pet", ThisKey="idPet", OtherKey="idPet", IsForeignKey=true)]
		public Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._idPet = value.idPet;
					}
					else
					{
						this._idPet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailAppointments(DetailAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_DetailAppointments(DetailAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clinic")]
	public partial class Clinic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idClinic;
		
		private string _name;
		
		private string _RUC;
		
		private string _address;
		
		private System.Nullable<decimal> _latitude;
		
		private System.Nullable<decimal> _longitude;
		
		private string _phone;
		
		private EntitySet<DetailAppointment> _DetailAppointments;
		
		private EntitySet<User> _Users;
		
		private EntitySet<DetailVetClinic> _DetailVetClinics;
		
		private EntitySet<ClinicHistory> _ClinicHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClinicChanging(int value);
    partial void OnidClinicChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnRUCChanging(string value);
    partial void OnRUCChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnlatitudeChanging(System.Nullable<decimal> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<decimal> value);
    partial void OnlongitudeChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
		
		public Clinic()
		{
			this._DetailAppointments = new EntitySet<DetailAppointment>(new Action<DetailAppointment>(this.attach_DetailAppointments), new Action<DetailAppointment>(this.detach_DetailAppointments));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._DetailVetClinics = new EntitySet<DetailVetClinic>(new Action<DetailVetClinic>(this.attach_DetailVetClinics), new Action<DetailVetClinic>(this.detach_DetailVetClinics));
			this._ClinicHistories = new EntitySet<ClinicHistory>(new Action<ClinicHistory>(this.attach_ClinicHistories), new Action<ClinicHistory>(this.detach_ClinicHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RUC", DbType="NVarChar(11)")]
		public string RUC
		{
			get
			{
				return this._RUC;
			}
			set
			{
				if ((this._RUC != value))
				{
					this.OnRUCChanging(value);
					this.SendPropertyChanging();
					this._RUC = value;
					this.SendPropertyChanged("RUC");
					this.OnRUCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(15)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_DetailAppointment", Storage="_DetailAppointments", ThisKey="idClinic", OtherKey="idClinic")]
		internal EntitySet<DetailAppointment> DetailAppointments
		{
			get
			{
				return this._DetailAppointments;
			}
			set
			{
				this._DetailAppointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_User", Storage="_Users", ThisKey="idClinic", OtherKey="idClinic")]
		internal EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_DetailVetClinic", Storage="_DetailVetClinics", ThisKey="idClinic", OtherKey="idClinic")]
		internal EntitySet<DetailVetClinic> DetailVetClinics
		{
			get
			{
				return this._DetailVetClinics;
			}
			set
			{
				this._DetailVetClinics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_ClinicHistory", Storage="_ClinicHistories", ThisKey="idClinic", OtherKey="idClinic")]
		internal EntitySet<ClinicHistory> ClinicHistories
		{
			get
			{
				return this._ClinicHistories;
			}
			set
			{
				this._ClinicHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailAppointments(DetailAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = this;
		}
		
		private void detach_DetailAppointments(DetailAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = null;
		}
		
		private void attach_DetailVetClinics(DetailVetClinic entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = this;
		}
		
		private void detach_DetailVetClinics(DetailVetClinic entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = null;
		}
		
		private void attach_ClinicHistories(ClinicHistory entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = this;
		}
		
		private void detach_ClinicHistories(ClinicHistory entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailAppointment")]
	public partial class DetailAppointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idDetail;
		
		private System.Nullable<int> _idAppointment;
		
		private System.Nullable<int> _idClinic;
		
		private System.Nullable<int> _idVet;
		
		private EntityRef<Appointment> _Appointment;
		
		private EntityRef<Clinic> _Clinic;
		
		private EntityRef<Vet> _Vet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDetailChanging(int value);
    partial void OnidDetailChanged();
    partial void OnidAppointmentChanging(System.Nullable<int> value);
    partial void OnidAppointmentChanged();
    partial void OnidClinicChanging(System.Nullable<int> value);
    partial void OnidClinicChanged();
    partial void OnidVetChanging(System.Nullable<int> value);
    partial void OnidVetChanged();
    #endregion
		
		public DetailAppointment()
		{
			this._Appointment = default(EntityRef<Appointment>);
			this._Clinic = default(EntityRef<Clinic>);
			this._Vet = default(EntityRef<Vet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idDetail
		{
			get
			{
				return this._idDetail;
			}
			set
			{
				if ((this._idDetail != value))
				{
					this.OnidDetailChanging(value);
					this.SendPropertyChanging();
					this._idDetail = value;
					this.SendPropertyChanged("idDetail");
					this.OnidDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAppointment", DbType="Int")]
		public System.Nullable<int> idAppointment
		{
			get
			{
				return this._idAppointment;
			}
			set
			{
				if ((this._idAppointment != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAppointmentChanging(value);
					this.SendPropertyChanging();
					this._idAppointment = value;
					this.SendPropertyChanged("idAppointment");
					this.OnidAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int")]
		public System.Nullable<int> idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					if (this._Clinic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVet", DbType="Int")]
		public System.Nullable<int> idVet
		{
			get
			{
				return this._idVet;
			}
			set
			{
				if ((this._idVet != value))
				{
					if (this._Vet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVetChanging(value);
					this.SendPropertyChanging();
					this._idVet = value;
					this.SendPropertyChanged("idVet");
					this.OnidVetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_DetailAppointment", Storage="_Appointment", ThisKey="idAppointment", OtherKey="idAppointment", IsForeignKey=true)]
		internal Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.DetailAppointments.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.DetailAppointments.Add(this);
						this._idAppointment = value.idAppointment;
					}
					else
					{
						this._idAppointment = default(Nullable<int>);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_DetailAppointment", Storage="_Clinic", ThisKey="idClinic", OtherKey="idClinic", IsForeignKey=true)]
		public Clinic Clinic
		{
			get
			{
				return this._Clinic.Entity;
			}
			set
			{
				Clinic previousValue = this._Clinic.Entity;
				if (((previousValue != value) 
							|| (this._Clinic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clinic.Entity = null;
						previousValue.DetailAppointments.Remove(this);
					}
					this._Clinic.Entity = value;
					if ((value != null))
					{
						value.DetailAppointments.Add(this);
						this._idClinic = value.idClinic;
					}
					else
					{
						this._idClinic = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clinic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_DetailAppointment", Storage="_Vet", ThisKey="idVet", OtherKey="idVet", IsForeignKey=true)]
		public Vet Vet
		{
			get
			{
				return this._Vet.Entity;
			}
			set
			{
				Vet previousValue = this._Vet.Entity;
				if (((previousValue != value) 
							|| (this._Vet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vet.Entity = null;
						previousValue.DetailAppointments.Remove(this);
					}
					this._Vet.Entity = value;
					if ((value != null))
					{
						value.DetailAppointments.Add(this);
						this._idVet = value.idVet;
					}
					else
					{
						this._idVet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disease")]
	public partial class Disease : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idDesease;
		
		private System.Nullable<int> _idPet;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _diagnosticDate;
		
		private EntityRef<Pet> _Pet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDeseaseChanging(int value);
    partial void OnidDeseaseChanged();
    partial void OnidPetChanging(System.Nullable<int> value);
    partial void OnidPetChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndiagnosticDateChanging(System.Nullable<System.DateTime> value);
    partial void OndiagnosticDateChanged();
    #endregion
		
		public Disease()
		{
			this._Pet = default(EntityRef<Pet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDesease", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idDesease
		{
			get
			{
				return this._idDesease;
			}
			set
			{
				if ((this._idDesease != value))
				{
					this.OnidDeseaseChanging(value);
					this.SendPropertyChanging();
					this._idDesease = value;
					this.SendPropertyChanged("idDesease");
					this.OnidDeseaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPet", DbType="Int")]
		public System.Nullable<int> idPet
		{
			get
			{
				return this._idPet;
			}
			set
			{
				if ((this._idPet != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPetChanging(value);
					this.SendPropertyChanging();
					this._idPet = value;
					this.SendPropertyChanged("idPet");
					this.OnidPetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnosticDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> diagnosticDate
		{
			get
			{
				return this._diagnosticDate;
			}
			set
			{
				if ((this._diagnosticDate != value))
				{
					this.OndiagnosticDateChanging(value);
					this.SendPropertyChanging();
					this._diagnosticDate = value;
					this.SendPropertyChanged("diagnosticDate");
					this.OndiagnosticDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Disease", Storage="_Pet", ThisKey="idPet", OtherKey="idPet", IsForeignKey=true)]
		internal Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.Diseases.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.Diseases.Add(this);
						this._idPet = value.idPet;
					}
					else
					{
						this._idPet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owner")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOwner;
		
		private string _firstname;
		
		private string _lastname;
		
		private System.Nullable<System.DateTime> _birthday;
		
		private string _phone;
		
		private EntitySet<Pet> _Pets;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOwnerChanging(int value);
    partial void OnidOwnerChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnbirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthdayChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
		
		public Owner()
		{
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOwner", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idOwner
		{
			get
			{
				return this._idOwner;
			}
			set
			{
				if ((this._idOwner != value))
				{
					this.OnidOwnerChanging(value);
					this.SendPropertyChanging();
					this._idOwner = value;
					this.SendPropertyChanged("idOwner");
					this.OnidOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(30)")]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="Date")]
		public System.Nullable<System.DateTime> birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(15)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Pet", Storage="_Pets", ThisKey="idOwner", OtherKey="idOwner")]
		internal EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_User", Storage="_Users", ThisKey="idOwner", OtherKey="idPetOwner")]
		internal EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pet")]
	public partial class Pet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPet;
		
		private string _firstname;
		
		private string _lastname;
		
		private int _idOwner;
		
		private System.Nullable<System.DateTime> _birthday;
		
		private string _breed;
		
		private string _color;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<Disease> _Diseases;
		
		private EntitySet<Vaccination> _Vaccinations;
		
		private EntitySet<ClinicHistory> _ClinicHistories;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPetChanging(int value);
    partial void OnidPetChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnidOwnerChanging(int value);
    partial void OnidOwnerChanged();
    partial void OnbirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthdayChanged();
    partial void OnbreedChanging(string value);
    partial void OnbreedChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    #endregion
		
		public Pet()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Diseases = new EntitySet<Disease>(new Action<Disease>(this.attach_Diseases), new Action<Disease>(this.detach_Diseases));
			this._Vaccinations = new EntitySet<Vaccination>(new Action<Vaccination>(this.attach_Vaccinations), new Action<Vaccination>(this.detach_Vaccinations));
			this._ClinicHistories = new EntitySet<ClinicHistory>(new Action<ClinicHistory>(this.attach_ClinicHistories), new Action<ClinicHistory>(this.detach_ClinicHistories));
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPet", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPet
		{
			get
			{
				return this._idPet;
			}
			set
			{
				if ((this._idPet != value))
				{
					this.OnidPetChanging(value);
					this.SendPropertyChanging();
					this._idPet = value;
					this.SendPropertyChanged("idPet");
					this.OnidPetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(30)")]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOwner", DbType="Int NOT NULL")]
		public int idOwner
		{
			get
			{
				return this._idOwner;
			}
			set
			{
				if ((this._idOwner != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOwnerChanging(value);
					this.SendPropertyChanging();
					this._idOwner = value;
					this.SendPropertyChanged("idOwner");
					this.OnidOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="Date")]
		public System.Nullable<System.DateTime> birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_breed", DbType="NVarChar(25)")]
		public string breed
		{
			get
			{
				return this._breed;
			}
			set
			{
				if ((this._breed != value))
				{
					this.OnbreedChanging(value);
					this.SendPropertyChanging();
					this._breed = value;
					this.SendPropertyChanged("breed");
					this.OnbreedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="NVarChar(15)")]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Appointment", Storage="_Appointments", ThisKey="idPet", OtherKey="idPet")]
		internal EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Disease", Storage="_Diseases", ThisKey="idPet", OtherKey="idPet")]
		public EntitySet<Disease> Diseases
		{
			get
			{
				return this._Diseases;
			}
			set
			{
				this._Diseases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Vaccination", Storage="_Vaccinations", ThisKey="idPet", OtherKey="idPet")]
		public EntitySet<Vaccination> Vaccinations
		{
			get
			{
				return this._Vaccinations;
			}
			set
			{
				this._Vaccinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_ClinicHistory", Storage="_ClinicHistories", ThisKey="idPet", OtherKey="idPet")]
		internal EntitySet<ClinicHistory> ClinicHistories
		{
			get
			{
				return this._ClinicHistories;
			}
			set
			{
				this._ClinicHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Pet", Storage="_Owner", ThisKey="idOwner", OtherKey="idOwner", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._idOwner = value.idOwner;
					}
					else
					{
						this._idOwner = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
		
		private void attach_Diseases(Disease entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_Diseases(Disease entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
		
		private void attach_Vaccinations(Vaccination entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_Vaccinations(Vaccination entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
		
		private void attach_ClinicHistories(ClinicHistory entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_ClinicHistories(ClinicHistory entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private string _guid;
		
		private string _email;
		
		private bool _emailConfirmed;
		
		private string _password;
		
		private System.Nullable<int> _idClinic;
		
		private System.Nullable<int> _idVet;
		
		private System.Nullable<int> _idPetOwner;
		
		private EntityRef<Clinic> _Clinic;
		
		private EntityRef<Owner> _Owner;
		
		private EntityRef<Vet> _Vet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnguidChanging(string value);
    partial void OnguidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnemailConfirmedChanging(bool value);
    partial void OnemailConfirmedChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnidClinicChanging(System.Nullable<int> value);
    partial void OnidClinicChanged();
    partial void OnidVetChanging(System.Nullable<int> value);
    partial void OnidVetChanged();
    partial void OnidPetOwnerChanging(System.Nullable<int> value);
    partial void OnidPetOwnerChanged();
    #endregion
		
		public User()
		{
			this._Clinic = default(EntityRef<Clinic>);
			this._Owner = default(EntityRef<Owner>);
			this._Vet = default(EntityRef<Vet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_guid", DbType="NVarChar(MAX)")]
		public string guid
		{
			get
			{
				return this._guid;
			}
			set
			{
				if ((this._guid != value))
				{
					this.OnguidChanging(value);
					this.SendPropertyChanging();
					this._guid = value;
					this.SendPropertyChanged("guid");
					this.OnguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailConfirmed", DbType="Bit NOT NULL")]
		public bool emailConfirmed
		{
			get
			{
				return this._emailConfirmed;
			}
			set
			{
				if ((this._emailConfirmed != value))
				{
					this.OnemailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._emailConfirmed = value;
					this.SendPropertyChanged("emailConfirmed");
					this.OnemailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int")]
		public System.Nullable<int> idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					if (this._Clinic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVet", DbType="Int")]
		public System.Nullable<int> idVet
		{
			get
			{
				return this._idVet;
			}
			set
			{
				if ((this._idVet != value))
				{
					if (this._Vet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVetChanging(value);
					this.SendPropertyChanging();
					this._idVet = value;
					this.SendPropertyChanged("idVet");
					this.OnidVetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPetOwner", DbType="Int")]
		public System.Nullable<int> idPetOwner
		{
			get
			{
				return this._idPetOwner;
			}
			set
			{
				if ((this._idPetOwner != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPetOwnerChanging(value);
					this.SendPropertyChanging();
					this._idPetOwner = value;
					this.SendPropertyChanged("idPetOwner");
					this.OnidPetOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_User", Storage="_Clinic", ThisKey="idClinic", OtherKey="idClinic", IsForeignKey=true)]
		public Clinic Clinic
		{
			get
			{
				return this._Clinic.Entity;
			}
			set
			{
				Clinic previousValue = this._Clinic.Entity;
				if (((previousValue != value) 
							|| (this._Clinic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clinic.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Clinic.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._idClinic = value.idClinic;
					}
					else
					{
						this._idClinic = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clinic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_User", Storage="_Owner", ThisKey="idPetOwner", OtherKey="idOwner", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._idPetOwner = value.idOwner;
					}
					else
					{
						this._idPetOwner = default(Nullable<int>);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_User", Storage="_Vet", ThisKey="idVet", OtherKey="idVet", IsForeignKey=true)]
		public Vet Vet
		{
			get
			{
				return this._Vet.Entity;
			}
			set
			{
				Vet previousValue = this._Vet.Entity;
				if (((previousValue != value) 
							|| (this._Vet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vet.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Vet.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._idVet = value.idVet;
					}
					else
					{
						this._idVet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vaccination")]
	public partial class Vaccination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVaccination;
		
		private System.Nullable<int> _idPet;
		
		private string _name;
		
		private string _laboratoryName;
		
		private System.Nullable<System.DateTime> _vaccinationDate;
		
		private EntityRef<Pet> _Pet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVaccinationChanging(int value);
    partial void OnidVaccinationChanged();
    partial void OnidPetChanging(System.Nullable<int> value);
    partial void OnidPetChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlaboratoryNameChanging(string value);
    partial void OnlaboratoryNameChanged();
    partial void OnvaccinationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnvaccinationDateChanged();
    #endregion
		
		public Vaccination()
		{
			this._Pet = default(EntityRef<Pet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVaccination", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVaccination
		{
			get
			{
				return this._idVaccination;
			}
			set
			{
				if ((this._idVaccination != value))
				{
					this.OnidVaccinationChanging(value);
					this.SendPropertyChanging();
					this._idVaccination = value;
					this.SendPropertyChanged("idVaccination");
					this.OnidVaccinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPet", DbType="Int")]
		public System.Nullable<int> idPet
		{
			get
			{
				return this._idPet;
			}
			set
			{
				if ((this._idPet != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPetChanging(value);
					this.SendPropertyChanging();
					this._idPet = value;
					this.SendPropertyChanged("idPet");
					this.OnidPetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_laboratoryName", DbType="NVarChar(50)")]
		public string laboratoryName
		{
			get
			{
				return this._laboratoryName;
			}
			set
			{
				if ((this._laboratoryName != value))
				{
					this.OnlaboratoryNameChanging(value);
					this.SendPropertyChanging();
					this._laboratoryName = value;
					this.SendPropertyChanged("laboratoryName");
					this.OnlaboratoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vaccinationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> vaccinationDate
		{
			get
			{
				return this._vaccinationDate;
			}
			set
			{
				if ((this._vaccinationDate != value))
				{
					this.OnvaccinationDateChanging(value);
					this.SendPropertyChanging();
					this._vaccinationDate = value;
					this.SendPropertyChanged("vaccinationDate");
					this.OnvaccinationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Vaccination", Storage="_Pet", ThisKey="idPet", OtherKey="idPet", IsForeignKey=true)]
		internal Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.Vaccinations.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.Vaccinations.Add(this);
						this._idPet = value.idPet;
					}
					else
					{
						this._idPet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailVetClinic")]
	public partial class DetailVetClinic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idDetail;
		
		private System.Nullable<int> _idClinic;
		
		private System.Nullable<int> _idVet;
		
		private System.Nullable<System.DateTime> _startDate;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private EntityRef<Clinic> _Clinic;
		
		private EntityRef<Vet> _Vet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDetailChanging(int value);
    partial void OnidDetailChanged();
    partial void OnidClinicChanging(System.Nullable<int> value);
    partial void OnidClinicChanged();
    partial void OnidVetChanging(System.Nullable<int> value);
    partial void OnidVetChanged();
    partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    #endregion
		
		public DetailVetClinic()
		{
			this._Clinic = default(EntityRef<Clinic>);
			this._Vet = default(EntityRef<Vet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idDetail
		{
			get
			{
				return this._idDetail;
			}
			set
			{
				if ((this._idDetail != value))
				{
					this.OnidDetailChanging(value);
					this.SendPropertyChanging();
					this._idDetail = value;
					this.SendPropertyChanged("idDetail");
					this.OnidDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int")]
		public System.Nullable<int> idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					if (this._Clinic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVet", DbType="Int")]
		public System.Nullable<int> idVet
		{
			get
			{
				return this._idVet;
			}
			set
			{
				if ((this._idVet != value))
				{
					if (this._Vet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVetChanging(value);
					this.SendPropertyChanging();
					this._idVet = value;
					this.SendPropertyChanged("idVet");
					this.OnidVetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date")]
		public System.Nullable<System.DateTime> startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_DetailVetClinic", Storage="_Clinic", ThisKey="idClinic", OtherKey="idClinic", IsForeignKey=true)]
		public Clinic Clinic
		{
			get
			{
				return this._Clinic.Entity;
			}
			set
			{
				Clinic previousValue = this._Clinic.Entity;
				if (((previousValue != value) 
							|| (this._Clinic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clinic.Entity = null;
						previousValue.DetailVetClinics.Remove(this);
					}
					this._Clinic.Entity = value;
					if ((value != null))
					{
						value.DetailVetClinics.Add(this);
						this._idClinic = value.idClinic;
					}
					else
					{
						this._idClinic = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clinic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_DetailVetClinic", Storage="_Vet", ThisKey="idVet", OtherKey="idVet", IsForeignKey=true)]
		public Vet Vet
		{
			get
			{
				return this._Vet.Entity;
			}
			set
			{
				Vet previousValue = this._Vet.Entity;
				if (((previousValue != value) 
							|| (this._Vet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vet.Entity = null;
						previousValue.DetailVetClinics.Remove(this);
					}
					this._Vet.Entity = value;
					if ((value != null))
					{
						value.DetailVetClinics.Add(this);
						this._idVet = value.idVet;
					}
					else
					{
						this._idVet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vet")]
	public partial class Vet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVet;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _RUC;
		
		private string _phone;
		
		private System.Nullable<System.DateTime> _licenseDate;
		
		private string _licenseCode;
		
		private System.Nullable<decimal> _latitude;
		
		private System.Nullable<decimal> _longitude;
		
		private EntitySet<DetailAppointment> _DetailAppointments;
		
		private EntitySet<User> _Users;
		
		private EntitySet<DetailVetClinic> _DetailVetClinics;
		
		private EntitySet<ClinicHistory> _ClinicHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVetChanging(int value);
    partial void OnidVetChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnRUCChanging(string value);
    partial void OnRUCChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnlicenseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlicenseDateChanged();
    partial void OnlicenseCodeChanging(string value);
    partial void OnlicenseCodeChanged();
    partial void OnlatitudeChanging(System.Nullable<decimal> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<decimal> value);
    partial void OnlongitudeChanged();
    #endregion
		
		public Vet()
		{
			this._DetailAppointments = new EntitySet<DetailAppointment>(new Action<DetailAppointment>(this.attach_DetailAppointments), new Action<DetailAppointment>(this.detach_DetailAppointments));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._DetailVetClinics = new EntitySet<DetailVetClinic>(new Action<DetailVetClinic>(this.attach_DetailVetClinics), new Action<DetailVetClinic>(this.detach_DetailVetClinics));
			this._ClinicHistories = new EntitySet<ClinicHistory>(new Action<ClinicHistory>(this.attach_ClinicHistories), new Action<ClinicHistory>(this.detach_ClinicHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVet", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVet
		{
			get
			{
				return this._idVet;
			}
			set
			{
				if ((this._idVet != value))
				{
					this.OnidVetChanging(value);
					this.SendPropertyChanging();
					this._idVet = value;
					this.SendPropertyChanged("idVet");
					this.OnidVetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(30)")]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RUC", DbType="NVarChar(11)")]
		public string RUC
		{
			get
			{
				return this._RUC;
			}
			set
			{
				if ((this._RUC != value))
				{
					this.OnRUCChanging(value);
					this.SendPropertyChanging();
					this._RUC = value;
					this.SendPropertyChanged("RUC");
					this.OnRUCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(15)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_licenseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> licenseDate
		{
			get
			{
				return this._licenseDate;
			}
			set
			{
				if ((this._licenseDate != value))
				{
					this.OnlicenseDateChanging(value);
					this.SendPropertyChanging();
					this._licenseDate = value;
					this.SendPropertyChanged("licenseDate");
					this.OnlicenseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_licenseCode", DbType="NVarChar(20)")]
		public string licenseCode
		{
			get
			{
				return this._licenseCode;
			}
			set
			{
				if ((this._licenseCode != value))
				{
					this.OnlicenseCodeChanging(value);
					this.SendPropertyChanging();
					this._licenseCode = value;
					this.SendPropertyChanged("licenseCode");
					this.OnlicenseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_DetailAppointment", Storage="_DetailAppointments", ThisKey="idVet", OtherKey="idVet")]
		internal EntitySet<DetailAppointment> DetailAppointments
		{
			get
			{
				return this._DetailAppointments;
			}
			set
			{
				this._DetailAppointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_User", Storage="_Users", ThisKey="idVet", OtherKey="idVet")]
		internal EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_DetailVetClinic", Storage="_DetailVetClinics", ThisKey="idVet", OtherKey="idVet")]
		internal EntitySet<DetailVetClinic> DetailVetClinics
		{
			get
			{
				return this._DetailVetClinics;
			}
			set
			{
				this._DetailVetClinics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_ClinicHistory", Storage="_ClinicHistories", ThisKey="idVet", OtherKey="idVet")]
		internal EntitySet<ClinicHistory> ClinicHistories
		{
			get
			{
				return this._ClinicHistories;
			}
			set
			{
				this._ClinicHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailAppointments(DetailAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Vet = this;
		}
		
		private void detach_DetailAppointments(DetailAppointment entity)
		{
			this.SendPropertyChanging();
			entity.Vet = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Vet = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Vet = null;
		}
		
		private void attach_DetailVetClinics(DetailVetClinic entity)
		{
			this.SendPropertyChanging();
			entity.Vet = this;
		}
		
		private void detach_DetailVetClinics(DetailVetClinic entity)
		{
			this.SendPropertyChanging();
			entity.Vet = null;
		}
		
		private void attach_ClinicHistories(ClinicHistory entity)
		{
			this.SendPropertyChanging();
			entity.Vet = this;
		}
		
		private void detach_ClinicHistories(ClinicHistory entity)
		{
			this.SendPropertyChanging();
			entity.Vet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTest;
		
		private System.Nullable<System.DateTime> _testDate;
		
		private string _title;
		
		private string _decription;
		
		private string _source;
		
		private System.Nullable<int> _idHistory;
		
		private EntityRef<ClinicHistory> _ClinicHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTestChanging(int value);
    partial void OnidTestChanged();
    partial void OntestDateChanging(System.Nullable<System.DateTime> value);
    partial void OntestDateChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndecriptionChanging(string value);
    partial void OndecriptionChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    partial void OnidHistoryChanging(System.Nullable<int> value);
    partial void OnidHistoryChanged();
    #endregion
		
		public Test()
		{
			this._ClinicHistory = default(EntityRef<ClinicHistory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTest", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idTest
		{
			get
			{
				return this._idTest;
			}
			set
			{
				if ((this._idTest != value))
				{
					this.OnidTestChanging(value);
					this.SendPropertyChanging();
					this._idTest = value;
					this.SendPropertyChanged("idTest");
					this.OnidTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> testDate
		{
			get
			{
				return this._testDate;
			}
			set
			{
				if ((this._testDate != value))
				{
					this.OntestDateChanging(value);
					this.SendPropertyChanging();
					this._testDate = value;
					this.SendPropertyChanged("testDate");
					this.OntestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(20)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decription", DbType="NVarChar(100)")]
		public string decription
		{
			get
			{
				return this._decription;
			}
			set
			{
				if ((this._decription != value))
				{
					this.OndecriptionChanging(value);
					this.SendPropertyChanging();
					this._decription = value;
					this.SendPropertyChanged("decription");
					this.OndecriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="NVarChar(MAX)")]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHistory", DbType="Int")]
		public System.Nullable<int> idHistory
		{
			get
			{
				return this._idHistory;
			}
			set
			{
				if ((this._idHistory != value))
				{
					if (this._ClinicHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidHistoryChanging(value);
					this.SendPropertyChanging();
					this._idHistory = value;
					this.SendPropertyChanged("idHistory");
					this.OnidHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicHistory_Test", Storage="_ClinicHistory", ThisKey="idHistory", OtherKey="idHistory", IsForeignKey=true)]
		internal ClinicHistory ClinicHistory
		{
			get
			{
				return this._ClinicHistory.Entity;
			}
			set
			{
				ClinicHistory previousValue = this._ClinicHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicHistory.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._ClinicHistory.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._idHistory = value.idHistory;
					}
					else
					{
						this._idHistory = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClinicHistory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClinicHistory")]
	public partial class ClinicHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idHistory;
		
		private string _clinicalSign;
		
		private string _anamnesis;
		
		private string _treatment;
		
		private string _observations;
		
		private string _diagnostic;
		
		private System.Nullable<System.DateTime> _arrivalDate;
		
		private System.Nullable<System.DateTime> _dischargeDate;
		
		private System.Nullable<int> _idPet;
		
		private System.Nullable<int> _idVet;
		
		private System.Nullable<int> _idClinic;
		
		private EntitySet<Test> _Tests;
		
		private EntityRef<Clinic> _Clinic;
		
		private EntityRef<Pet> _Pet;
		
		private EntityRef<Vet> _Vet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidHistoryChanging(int value);
    partial void OnidHistoryChanged();
    partial void OnclinicalSignChanging(string value);
    partial void OnclinicalSignChanged();
    partial void OnanamnesisChanging(string value);
    partial void OnanamnesisChanged();
    partial void OntreatmentChanging(string value);
    partial void OntreatmentChanged();
    partial void OnobservationsChanging(string value);
    partial void OnobservationsChanged();
    partial void OndiagnosticChanging(string value);
    partial void OndiagnosticChanged();
    partial void OnarrivalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnarrivalDateChanged();
    partial void OndischargeDateChanging(System.Nullable<System.DateTime> value);
    partial void OndischargeDateChanged();
    partial void OnidPetChanging(System.Nullable<int> value);
    partial void OnidPetChanged();
    partial void OnidVetChanging(System.Nullable<int> value);
    partial void OnidVetChanged();
    partial void OnidClinicChanging(System.Nullable<int> value);
    partial void OnidClinicChanged();
    #endregion
		
		public ClinicHistory()
		{
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._Clinic = default(EntityRef<Clinic>);
			this._Pet = default(EntityRef<Pet>);
			this._Vet = default(EntityRef<Vet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHistory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idHistory
		{
			get
			{
				return this._idHistory;
			}
			set
			{
				if ((this._idHistory != value))
				{
					this.OnidHistoryChanging(value);
					this.SendPropertyChanging();
					this._idHistory = value;
					this.SendPropertyChanged("idHistory");
					this.OnidHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clinicalSign", DbType="NVarChar(300)")]
		public string clinicalSign
		{
			get
			{
				return this._clinicalSign;
			}
			set
			{
				if ((this._clinicalSign != value))
				{
					this.OnclinicalSignChanging(value);
					this.SendPropertyChanging();
					this._clinicalSign = value;
					this.SendPropertyChanged("clinicalSign");
					this.OnclinicalSignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_anamnesis", DbType="NVarChar(500)")]
		public string anamnesis
		{
			get
			{
				return this._anamnesis;
			}
			set
			{
				if ((this._anamnesis != value))
				{
					this.OnanamnesisChanging(value);
					this.SendPropertyChanging();
					this._anamnesis = value;
					this.SendPropertyChanged("anamnesis");
					this.OnanamnesisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_treatment", DbType="NVarChar(50)")]
		public string treatment
		{
			get
			{
				return this._treatment;
			}
			set
			{
				if ((this._treatment != value))
				{
					this.OntreatmentChanging(value);
					this.SendPropertyChanging();
					this._treatment = value;
					this.SendPropertyChanged("treatment");
					this.OntreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_observations", DbType="NVarChar(50)")]
		public string observations
		{
			get
			{
				return this._observations;
			}
			set
			{
				if ((this._observations != value))
				{
					this.OnobservationsChanging(value);
					this.SendPropertyChanging();
					this._observations = value;
					this.SendPropertyChanged("observations");
					this.OnobservationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnostic", DbType="NVarChar(50)")]
		public string diagnostic
		{
			get
			{
				return this._diagnostic;
			}
			set
			{
				if ((this._diagnostic != value))
				{
					this.OndiagnosticChanging(value);
					this.SendPropertyChanging();
					this._diagnostic = value;
					this.SendPropertyChanged("diagnostic");
					this.OndiagnosticChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_arrivalDate", DbType="Date")]
		public System.Nullable<System.DateTime> arrivalDate
		{
			get
			{
				return this._arrivalDate;
			}
			set
			{
				if ((this._arrivalDate != value))
				{
					this.OnarrivalDateChanging(value);
					this.SendPropertyChanging();
					this._arrivalDate = value;
					this.SendPropertyChanged("arrivalDate");
					this.OnarrivalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dischargeDate", DbType="Date")]
		public System.Nullable<System.DateTime> dischargeDate
		{
			get
			{
				return this._dischargeDate;
			}
			set
			{
				if ((this._dischargeDate != value))
				{
					this.OndischargeDateChanging(value);
					this.SendPropertyChanging();
					this._dischargeDate = value;
					this.SendPropertyChanged("dischargeDate");
					this.OndischargeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPet", DbType="Int")]
		public System.Nullable<int> idPet
		{
			get
			{
				return this._idPet;
			}
			set
			{
				if ((this._idPet != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPetChanging(value);
					this.SendPropertyChanging();
					this._idPet = value;
					this.SendPropertyChanged("idPet");
					this.OnidPetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVet", DbType="Int")]
		public System.Nullable<int> idVet
		{
			get
			{
				return this._idVet;
			}
			set
			{
				if ((this._idVet != value))
				{
					if (this._Vet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVetChanging(value);
					this.SendPropertyChanging();
					this._idVet = value;
					this.SendPropertyChanged("idVet");
					this.OnidVetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int")]
		public System.Nullable<int> idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					if (this._Clinic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicHistory_Test", Storage="_Tests", ThisKey="idHistory", OtherKey="idHistory")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_ClinicHistory", Storage="_Clinic", ThisKey="idClinic", OtherKey="idClinic", IsForeignKey=true)]
		public Clinic Clinic
		{
			get
			{
				return this._Clinic.Entity;
			}
			set
			{
				Clinic previousValue = this._Clinic.Entity;
				if (((previousValue != value) 
							|| (this._Clinic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clinic.Entity = null;
						previousValue.ClinicHistories.Remove(this);
					}
					this._Clinic.Entity = value;
					if ((value != null))
					{
						value.ClinicHistories.Add(this);
						this._idClinic = value.idClinic;
					}
					else
					{
						this._idClinic = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clinic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_ClinicHistory", Storage="_Pet", ThisKey="idPet", OtherKey="idPet", IsForeignKey=true)]
		public Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.ClinicHistories.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.ClinicHistories.Add(this);
						this._idPet = value.idPet;
					}
					else
					{
						this._idPet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_ClinicHistory", Storage="_Vet", ThisKey="idVet", OtherKey="idVet", IsForeignKey=true)]
		public Vet Vet
		{
			get
			{
				return this._Vet.Entity;
			}
			set
			{
				Vet previousValue = this._Vet.Entity;
				if (((previousValue != value) 
							|| (this._Vet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vet.Entity = null;
						previousValue.ClinicHistories.Remove(this);
					}
					this._Vet.Entity = value;
					if ((value != null))
					{
						value.ClinicHistories.Add(this);
						this._idVet = value.idVet;
					}
					else
					{
						this._idVet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.ClinicHistory = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.ClinicHistory = null;
		}
	}
}
#pragma warning restore 1591
