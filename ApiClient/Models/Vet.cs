/* 
 * API for Pet Project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace PetApiClient
{
    /// <summary>
    /// Vet
    /// </summary>
    [DataContract]
    public partial class Vet :  IEquatable<Vet>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vet" /> class.
        /// </summary>
        /// <param name="IdVet">IdVet.</param>
        /// <param name="Firstname">Firstname.</param>
        /// <param name="Lastname">Lastname.</param>
        /// <param name="RUC">RUC.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="LicenseDate">LicenseDate.</param>
        /// <param name="LicenseCode">LicenseCode.</param>
        /// <param name="Latitude">Latitude.</param>
        /// <param name="Longitude">Longitude.</param>
        public Vet(int? IdVet = default(int?), string Firstname = default(string), string Lastname = default(string), string RUC = default(string), string Phone = default(string), DateTime? LicenseDate = default(DateTime?), string LicenseCode = default(string), double? Latitude = default(double?), double? Longitude = default(double?))
        {
            this.IdVet = IdVet;
            this.Firstname = Firstname;
            this.Lastname = Lastname;
            this.RUC = RUC;
            this.Phone = Phone;
            this.LicenseDate = LicenseDate;
            this.LicenseCode = LicenseCode;
            this.Latitude = Latitude;
            this.Longitude = Longitude;
        }
        
        /// <summary>
        /// Gets or Sets IdVet
        /// </summary>
        [DataMember(Name="idVet", EmitDefaultValue=false)]
        public int? IdVet { get; set; }
        /// <summary>
        /// Gets or Sets Firstname
        /// </summary>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }
        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }
        /// <summary>
        /// Gets or Sets RUC
        /// </summary>
        [DataMember(Name="RUC", EmitDefaultValue=false)]
        public string RUC { get; set; }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Gets or Sets LicenseDate
        /// </summary>
        [DataMember(Name="licenseDate", EmitDefaultValue=false)]
        public DateTime? LicenseDate { get; set; }
        /// <summary>
        /// Gets or Sets LicenseCode
        /// </summary>
        [DataMember(Name="licenseCode", EmitDefaultValue=false)]
        public string LicenseCode { get; set; }
        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }
        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        [JsonIgnore]
        public IEnumerable<Appointment> Appointments { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            //var sb = new StringBuilder();
            //sb.Append("class Vet {\n");
            //sb.Append("  IdVet: ").Append(IdVet).Append("\n");
            //sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            //sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            //sb.Append("  RUC: ").Append(RUC).Append("\n");
            //sb.Append("  Phone: ").Append(Phone).Append("\n");
            //sb.Append("  LicenseDate: ").Append(LicenseDate).Append("\n");
            //sb.Append("  LicenseCode: ").Append(LicenseCode).Append("\n");
            //sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            //sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            //sb.Append("}\n");
            //return sb.ToString();
            return $"{Firstname} {Lastname}";
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Vet);
        }

        /// <summary>
        /// Returns true if Vet instances are equal
        /// </summary>
        /// <param name="other">Instance of Vet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vet other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IdVet == other.IdVet ||
                    this.IdVet != null &&
                    this.IdVet.Equals(other.IdVet)
                ) && 
                (
                    this.Firstname == other.Firstname ||
                    this.Firstname != null &&
                    this.Firstname.Equals(other.Firstname)
                ) && 
                (
                    this.Lastname == other.Lastname ||
                    this.Lastname != null &&
                    this.Lastname.Equals(other.Lastname)
                ) && 
                (
                    this.RUC == other.RUC ||
                    this.RUC != null &&
                    this.RUC.Equals(other.RUC)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.LicenseDate == other.LicenseDate ||
                    this.LicenseDate != null &&
                    this.LicenseDate.Equals(other.LicenseDate)
                ) && 
                (
                    this.LicenseCode == other.LicenseCode ||
                    this.LicenseCode != null &&
                    this.LicenseCode.Equals(other.LicenseCode)
                ) && 
                (
                    this.Latitude == other.Latitude ||
                    this.Latitude != null &&
                    this.Latitude.Equals(other.Latitude)
                ) && 
                (
                    this.Longitude == other.Longitude ||
                    this.Longitude != null &&
                    this.Longitude.Equals(other.Longitude)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IdVet != null)
                    hash = hash * 59 + this.IdVet.GetHashCode();
                if (this.Firstname != null)
                    hash = hash * 59 + this.Firstname.GetHashCode();
                if (this.Lastname != null)
                    hash = hash * 59 + this.Lastname.GetHashCode();
                if (this.RUC != null)
                    hash = hash * 59 + this.RUC.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.LicenseDate != null)
                    hash = hash * 59 + this.LicenseDate.GetHashCode();
                if (this.LicenseCode != null)
                    hash = hash * 59 + this.LicenseCode.GetHashCode();
                if (this.Latitude != null)
                    hash = hash * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hash = hash * 59 + this.Longitude.GetHashCode();
                return hash;
            }
        }

    }

}
