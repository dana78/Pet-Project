/* 
 * API for Pet Project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PetApiClient
{
    /// <summary>
    /// AppointmentRM
    /// </summary>
    [DataContract]
    public partial class AppointmentRM :  IEquatable<AppointmentRM>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentRM" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppointmentRM() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentRM" /> class.
        /// </summary>
        /// <param name="PetId">PetId (required).</param>
        /// <param name="Date">Date (required).</param>
        /// <param name="Title">Title (required).</param>
        /// <param name="ClinicId">ClinicId.</param>
        /// <param name="VetId">VetId.</param>
        public AppointmentRM(int? PetId = default(int?), DateTime? Date = default(DateTime?), string Title = default(string), int? ClinicId = default(int?), int? VetId = default(int?))
        {            
        }
        
        /// <summary>
        /// Gets or Sets PetId
        /// </summary>
        [DataMember(Name="PetId", EmitDefaultValue=false)]
        public int? PetId { get; set; }
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        private string _title;
        public string Title
        {
            get { return _title?.Trim(); }
            set { _title = value; }
        }

        /// <summary>
        /// Gets or Sets ClinicId
        /// </summary>
        [DataMember(Name="ClinicId", EmitDefaultValue=false)]
        public int? ClinicId { get; set; }
        /// <summary>
        /// Gets or Sets VetId
        /// </summary>
        [DataMember(Name="VetId", EmitDefaultValue=false)]
        public int? VetId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentRM {\n");
            sb.Append("  PetId: ").Append(PetId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ClinicId: ").Append(ClinicId).Append("\n");
            sb.Append("  VetId: ").Append(VetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AppointmentRM);
        }

        /// <summary>
        /// Returns true if AppointmentRM instances are equal
        /// </summary>
        /// <param name="other">Instance of AppointmentRM to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentRM other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PetId == other.PetId ||
                    this.PetId != null &&
                    this.PetId.Equals(other.PetId)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.ClinicId == other.ClinicId ||
                    this.ClinicId != null &&
                    this.ClinicId.Equals(other.ClinicId)
                ) && 
                (
                    this.VetId == other.VetId ||
                    this.VetId != null &&
                    this.VetId.Equals(other.VetId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PetId != null)
                    hash = hash * 59 + this.PetId.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.ClinicId != null)
                    hash = hash * 59 + this.ClinicId.GetHashCode();
                if (this.VetId != null)
                    hash = hash * 59 + this.VetId.GetHashCode();
                return hash;
            }
        }
    }

}
