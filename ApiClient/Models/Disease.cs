/* 
 * API for Pet Project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace PetApiClient
{
    /// <summary>
    /// Disease
    /// </summary>
    [DataContract]
    public partial class Disease :  IEquatable<Disease>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Disease" /> class.
        /// </summary>
        /// <param name="IdDesease">IdDesease.</param>
        /// <param name="IdPet">IdPet.</param>
        /// <param name="Name">Name.</param>
        /// <param name="DiagnosticDate">DiagnosticDate.</param>
        public Disease(int? IdDesease = default(int?), int? IdPet = default(int?), string Name = default(string), DateTime? DiagnosticDate = default(DateTime?))
        {
            this.IdDesease = IdDesease;
            this.IdPet = IdPet;
            this.Name = Name;
            this.DiagnosticDate = DiagnosticDate;
        }
        
        /// <summary>
        /// Gets or Sets IdDesease
        /// </summary>
        [DataMember(Name="idDesease", EmitDefaultValue=false)]
        public int? IdDesease { get; set; }
        /// <summary>
        /// Gets or Sets IdPet
        /// </summary>
        [DataMember(Name="idPet", EmitDefaultValue=false)]
        public int? IdPet { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets DiagnosticDate
        /// </summary>
        [DataMember(Name="diagnosticDate", EmitDefaultValue=false)]
        public DateTime? DiagnosticDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Disease {\n");
            sb.Append("  IdDesease: ").Append(IdDesease).Append("\n");
            sb.Append("  IdPet: ").Append(IdPet).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DiagnosticDate: ").Append(DiagnosticDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Disease);
        }

        /// <summary>
        /// Returns true if Disease instances are equal
        /// </summary>
        /// <param name="other">Instance of Disease to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Disease other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IdDesease == other.IdDesease ||
                    this.IdDesease != null &&
                    this.IdDesease.Equals(other.IdDesease)
                ) && 
                (
                    this.IdPet == other.IdPet ||
                    this.IdPet != null &&
                    this.IdPet.Equals(other.IdPet)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DiagnosticDate == other.DiagnosticDate ||
                    this.DiagnosticDate != null &&
                    this.DiagnosticDate.Equals(other.DiagnosticDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IdDesease != null)
                    hash = hash * 59 + this.IdDesease.GetHashCode();
                if (this.IdPet != null)
                    hash = hash * 59 + this.IdPet.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DiagnosticDate != null)
                    hash = hash * 59 + this.DiagnosticDate.GetHashCode();
                return hash;
            }
        }

    }

}
