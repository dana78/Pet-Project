/* 
 * API for Pet Project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace PetApiClient
{
    /// <summary>
    /// ClinicHistory
    /// </summary>
    [DataContract]
    public partial class ClinicHistory :  IEquatable<ClinicHistory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClinicHistory" /> class.
        /// </summary>
        /// <param name="IdHistory">IdHistory.</param>
        /// <param name="ClinicalSign">ClinicalSign.</param>
        /// <param name="Anamnesis">Anamnesis.</param>
        /// <param name="Treatment">Treatment.</param>
        /// <param name="Observations">Observations.</param>
        /// <param name="Diagnostic">Diagnostic.</param>
        /// <param name="ArrivalDate">ArrivalDate.</param>
        /// <param name="DischargeDate">DischargeDate.</param>
        /// <param name="IdPet">IdPet.</param>
        /// <param name="IdVet">IdVet.</param>
        /// <param name="IdClinic">IdClinic.</param>
        /// <param name="Tests">Tests.</param>
        /// <param name="Clinic">Clinic.</param>
        /// <param name="Pet">Pet.</param>
        /// <param name="Vet">Vet.</param>
        public ClinicHistory(int? IdHistory = default(int?), string ClinicalSign = default(string), string Anamnesis = default(string), string Treatment = default(string), string Observations = default(string), string Diagnostic = default(string), DateTime? ArrivalDate = default(DateTime?), DateTime? DischargeDate = default(DateTime?), int? IdPet = default(int?), int? IdVet = default(int?), int? IdClinic = default(int?), List<Test> Tests = default(List<Test>), Clinic Clinic = default(Clinic), Pet Pet = default(Pet), Vet Vet = default(Vet))
        {
            this.IdHistory = IdHistory;
            this.ClinicalSign = ClinicalSign;
            this.Anamnesis = Anamnesis;
            this.Treatment = Treatment;
            this.Observations = Observations;
            this.Diagnostic = Diagnostic;
            this.ArrivalDate = ArrivalDate;
            this.DischargeDate = DischargeDate;
            this.IdPet = IdPet;
            this.IdVet = IdVet;
            this.IdClinic = IdClinic;
            this.Tests = Tests;
            this.Clinic = Clinic;
            this.Pet = Pet;
            this.Vet = Vet;
        }
        
        /// <summary>
        /// Gets or Sets IdHistory
        /// </summary>
        [DataMember(Name="idHistory", EmitDefaultValue=false)]
        public int? IdHistory { get; set; }
        /// <summary>
        /// Gets or Sets ClinicalSign
        /// </summary>
        [DataMember(Name="clinicalSign", EmitDefaultValue=false)]
        public string ClinicalSign { get; set; }
        /// <summary>
        /// Gets or Sets Anamnesis
        /// </summary>
        [DataMember(Name="anamnesis", EmitDefaultValue=false)]
        public string Anamnesis { get; set; }
        /// <summary>
        /// Gets or Sets Treatment
        /// </summary>
        [DataMember(Name="treatment", EmitDefaultValue=false)]
        public string Treatment { get; set; }
        /// <summary>
        /// Gets or Sets Observations
        /// </summary>
        [DataMember(Name="observations", EmitDefaultValue=false)]
        public string Observations { get; set; }
        /// <summary>
        /// Gets or Sets Diagnostic
        /// </summary>
        [DataMember(Name="diagnostic", EmitDefaultValue=false)]
        public string Diagnostic { get; set; }
        /// <summary>
        /// Gets or Sets ArrivalDate
        /// </summary>
        [DataMember(Name="arrivalDate", EmitDefaultValue=false)]
        public DateTime? ArrivalDate { get; set; }
        /// <summary>
        /// Gets or Sets DischargeDate
        /// </summary>
        [DataMember(Name="dischargeDate", EmitDefaultValue=false)]
        public DateTime? DischargeDate { get; set; }
        /// <summary>
        /// Gets or Sets IdPet
        /// </summary>
        [DataMember(Name="idPet", EmitDefaultValue=false)]
        public int? IdPet { get; set; }
        /// <summary>
        /// Gets or Sets IdVet
        /// </summary>
        [DataMember(Name="idVet", EmitDefaultValue=false)]
        public int? IdVet { get; set; }
        /// <summary>
        /// Gets or Sets IdClinic
        /// </summary>
        [DataMember(Name="idClinic", EmitDefaultValue=false)]
        public int? IdClinic { get; set; }
        /// <summary>
        /// Gets or Sets Tests
        /// </summary>
        [DataMember(Name="Tests", EmitDefaultValue=false)]
        public List<Test> Tests { get; set; }
        /// <summary>
        /// Gets or Sets Clinic
        /// </summary>
        [DataMember(Name="Clinic", EmitDefaultValue=false)]
        public Clinic Clinic { get; set; }
        /// <summary>
        /// Gets or Sets Pet
        /// </summary>
        [DataMember(Name="Pet", EmitDefaultValue=false)]
        public Pet Pet { get; set; }
        /// <summary>
        /// Gets or Sets Vet
        /// </summary>
        [DataMember(Name="Vet", EmitDefaultValue=false)]
        public Vet Vet { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClinicHistory {\n");
            sb.Append("  IdHistory: ").Append(IdHistory).Append("\n");
            sb.Append("  ClinicalSign: ").Append(ClinicalSign).Append("\n");
            sb.Append("  Anamnesis: ").Append(Anamnesis).Append("\n");
            sb.Append("  Treatment: ").Append(Treatment).Append("\n");
            sb.Append("  Observations: ").Append(Observations).Append("\n");
            sb.Append("  Diagnostic: ").Append(Diagnostic).Append("\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  DischargeDate: ").Append(DischargeDate).Append("\n");
            sb.Append("  IdPet: ").Append(IdPet).Append("\n");
            sb.Append("  IdVet: ").Append(IdVet).Append("\n");
            sb.Append("  IdClinic: ").Append(IdClinic).Append("\n");
            sb.Append("  Tests: ").Append(Tests).Append("\n");
            sb.Append("  Clinic: ").Append(Clinic).Append("\n");
            sb.Append("  Pet: ").Append(Pet).Append("\n");
            sb.Append("  Vet: ").Append(Vet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClinicHistory);
        }

        /// <summary>
        /// Returns true if ClinicHistory instances are equal
        /// </summary>
        /// <param name="other">Instance of ClinicHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClinicHistory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IdHistory == other.IdHistory ||
                    this.IdHistory != null &&
                    this.IdHistory.Equals(other.IdHistory)
                ) && 
                (
                    this.ClinicalSign == other.ClinicalSign ||
                    this.ClinicalSign != null &&
                    this.ClinicalSign.Equals(other.ClinicalSign)
                ) && 
                (
                    this.Anamnesis == other.Anamnesis ||
                    this.Anamnesis != null &&
                    this.Anamnesis.Equals(other.Anamnesis)
                ) && 
                (
                    this.Treatment == other.Treatment ||
                    this.Treatment != null &&
                    this.Treatment.Equals(other.Treatment)
                ) && 
                (
                    this.Observations == other.Observations ||
                    this.Observations != null &&
                    this.Observations.Equals(other.Observations)
                ) && 
                (
                    this.Diagnostic == other.Diagnostic ||
                    this.Diagnostic != null &&
                    this.Diagnostic.Equals(other.Diagnostic)
                ) && 
                (
                    this.ArrivalDate == other.ArrivalDate ||
                    this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(other.ArrivalDate)
                ) && 
                (
                    this.DischargeDate == other.DischargeDate ||
                    this.DischargeDate != null &&
                    this.DischargeDate.Equals(other.DischargeDate)
                ) && 
                (
                    this.IdPet == other.IdPet ||
                    this.IdPet != null &&
                    this.IdPet.Equals(other.IdPet)
                ) && 
                (
                    this.IdVet == other.IdVet ||
                    this.IdVet != null &&
                    this.IdVet.Equals(other.IdVet)
                ) && 
                (
                    this.IdClinic == other.IdClinic ||
                    this.IdClinic != null &&
                    this.IdClinic.Equals(other.IdClinic)
                ) && 
                (
                    this.Tests == other.Tests ||
                    this.Tests != null &&
                    this.Tests.SequenceEqual(other.Tests)
                ) && 
                (
                    this.Clinic == other.Clinic ||
                    this.Clinic != null &&
                    this.Clinic.Equals(other.Clinic)
                ) && 
                (
                    this.Pet == other.Pet ||
                    this.Pet != null &&
                    this.Pet.Equals(other.Pet)
                ) && 
                (
                    this.Vet == other.Vet ||
                    this.Vet != null &&
                    this.Vet.Equals(other.Vet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IdHistory != null)
                    hash = hash * 59 + this.IdHistory.GetHashCode();
                if (this.ClinicalSign != null)
                    hash = hash * 59 + this.ClinicalSign.GetHashCode();
                if (this.Anamnesis != null)
                    hash = hash * 59 + this.Anamnesis.GetHashCode();
                if (this.Treatment != null)
                    hash = hash * 59 + this.Treatment.GetHashCode();
                if (this.Observations != null)
                    hash = hash * 59 + this.Observations.GetHashCode();
                if (this.Diagnostic != null)
                    hash = hash * 59 + this.Diagnostic.GetHashCode();
                if (this.ArrivalDate != null)
                    hash = hash * 59 + this.ArrivalDate.GetHashCode();
                if (this.DischargeDate != null)
                    hash = hash * 59 + this.DischargeDate.GetHashCode();
                if (this.IdPet != null)
                    hash = hash * 59 + this.IdPet.GetHashCode();
                if (this.IdVet != null)
                    hash = hash * 59 + this.IdVet.GetHashCode();
                if (this.IdClinic != null)
                    hash = hash * 59 + this.IdClinic.GetHashCode();
                if (this.Tests != null)
                    hash = hash * 59 + this.Tests.GetHashCode();
                if (this.Clinic != null)
                    hash = hash * 59 + this.Clinic.GetHashCode();
                if (this.Pet != null)
                    hash = hash * 59 + this.Pet.GetHashCode();
                if (this.Vet != null)
                    hash = hash * 59 + this.Vet.GetHashCode();
                return hash;
            }
        }

    }

}
