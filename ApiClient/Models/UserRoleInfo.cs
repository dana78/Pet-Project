/* 
 * API for Pet Project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace PetApiClient
{
    /// <summary>
    /// UserRoleInfo
    /// </summary>
    [DataContract]
    public partial class UserRoleInfo :  IEquatable<UserRoleInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRoleInfo" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="OwnerId">OwnerId.</param>
        /// <param name="VetId">VetId.</param>
        /// <param name="ClinicId">ClinicId.</param>
        /// <param name="Owner">Owner.</param>
        /// <param name="Vet">Vet.</param>
        /// <param name="Clinic">Clinic.</param>
        public UserRoleInfo(int? Id = default(int?), int? OwnerId = default(int?), int? VetId = default(int?), int? ClinicId = default(int?), Owner Owner = default(Owner), Vet Vet = default(Vet), Clinic Clinic = default(Clinic))
        {
            this.Id = Id;
            this.OwnerId = OwnerId;
            this.VetId = VetId;
            this.ClinicId = ClinicId;
            this.Owner = Owner;
            this.Vet = Vet;
            this.Clinic = Clinic;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="OwnerId", EmitDefaultValue=false)]
        public int? OwnerId { get; set; }
        /// <summary>
        /// Gets or Sets VetId
        /// </summary>
        [DataMember(Name="VetId", EmitDefaultValue=false)]
        public int? VetId { get; set; }
        /// <summary>
        /// Gets or Sets ClinicId
        /// </summary>
        [DataMember(Name="ClinicId", EmitDefaultValue=false)]
        public int? ClinicId { get; set; }
        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public Owner Owner { get; set; }
        /// <summary>
        /// Gets or Sets Vet
        /// </summary>
        [DataMember(Name="Vet", EmitDefaultValue=false)]
        public Vet Vet { get; set; }
        /// <summary>
        /// Gets or Sets Clinic
        /// </summary>
        [DataMember(Name="Clinic", EmitDefaultValue=false)]
        public Clinic Clinic { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRoleInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  VetId: ").Append(VetId).Append("\n");
            sb.Append("  ClinicId: ").Append(ClinicId).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Vet: ").Append(Vet).Append("\n");
            sb.Append("  Clinic: ").Append(Clinic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserRoleInfo);
        }

        /// <summary>
        /// Returns true if UserRoleInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of UserRoleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRoleInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OwnerId == other.OwnerId ||
                    this.OwnerId != null &&
                    this.OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    this.VetId == other.VetId ||
                    this.VetId != null &&
                    this.VetId.Equals(other.VetId)
                ) && 
                (
                    this.ClinicId == other.ClinicId ||
                    this.ClinicId != null &&
                    this.ClinicId.Equals(other.ClinicId)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                ) && 
                (
                    this.Vet == other.Vet ||
                    this.Vet != null &&
                    this.Vet.Equals(other.Vet)
                ) && 
                (
                    this.Clinic == other.Clinic ||
                    this.Clinic != null &&
                    this.Clinic.Equals(other.Clinic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.OwnerId != null)
                    hash = hash * 59 + this.OwnerId.GetHashCode();
                if (this.VetId != null)
                    hash = hash * 59 + this.VetId.GetHashCode();
                if (this.ClinicId != null)
                    hash = hash * 59 + this.ClinicId.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                if (this.Vet != null)
                    hash = hash * 59 + this.Vet.GetHashCode();
                if (this.Clinic != null)
                    hash = hash * 59 + this.Clinic.GetHashCode();
                return hash;
            }
        }

    }

}
