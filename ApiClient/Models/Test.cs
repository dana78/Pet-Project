/* 
 * API for Pet Project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace PetApiClient
{
    /// <summary>
    /// Test
    /// </summary>
    [DataContract]
    public partial class Test :  IEquatable<Test>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Test" /> class.
        /// </summary>
        /// <param name="IdTest">IdTest.</param>
        /// <param name="TestDate">TestDate.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Decription">Decription.</param>
        /// <param name="Source">Source.</param>
        /// <param name="IdHistory">IdHistory.</param>
        public Test(int? IdTest = default(int?), DateTime? TestDate = default(DateTime?), string Title = default(string), string Decription = default(string), string Source = default(string), int? IdHistory = default(int?))
        {
            this.IdTest = IdTest;
            this.TestDate = TestDate;
            this.Title = Title;
            this.Decription = Decription;
            this.Source = Source;
            this.IdHistory = IdHistory;
        }
        
        /// <summary>
        /// Gets or Sets IdTest
        /// </summary>
        [DataMember(Name="idTest", EmitDefaultValue=false)]
        public int? IdTest { get; set; }
        /// <summary>
        /// Gets or Sets TestDate
        /// </summary>
        [DataMember(Name="testDate", EmitDefaultValue=false)]
        public DateTime? TestDate { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Decription
        /// </summary>
        [DataMember(Name="decription", EmitDefaultValue=false)]
        public string Decription { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// Gets or Sets IdHistory
        /// </summary>
        [DataMember(Name="idHistory", EmitDefaultValue=false)]
        public int? IdHistory { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Test {\n");
            sb.Append("  IdTest: ").Append(IdTest).Append("\n");
            sb.Append("  TestDate: ").Append(TestDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Decription: ").Append(Decription).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  IdHistory: ").Append(IdHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Test);
        }

        /// <summary>
        /// Returns true if Test instances are equal
        /// </summary>
        /// <param name="other">Instance of Test to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Test other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IdTest == other.IdTest ||
                    this.IdTest != null &&
                    this.IdTest.Equals(other.IdTest)
                ) && 
                (
                    this.TestDate == other.TestDate ||
                    this.TestDate != null &&
                    this.TestDate.Equals(other.TestDate)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Decription == other.Decription ||
                    this.Decription != null &&
                    this.Decription.Equals(other.Decription)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.IdHistory == other.IdHistory ||
                    this.IdHistory != null &&
                    this.IdHistory.Equals(other.IdHistory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IdTest != null)
                    hash = hash * 59 + this.IdTest.GetHashCode();
                if (this.TestDate != null)
                    hash = hash * 59 + this.TestDate.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Decription != null)
                    hash = hash * 59 + this.Decription.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.IdHistory != null)
                    hash = hash * 59 + this.IdHistory.GetHashCode();
                return hash;
            }
        }

    }

}
